{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport { useGridContext } from '../Grid.context.mjs';\nimport { getBaseValue } from '../../../core/utils/get-base-value/get-base-value.mjs';\nimport { useMantineTheme } from '../../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { filterProps } from '../../../core/utils/filter-props/filter-props.mjs';\nimport { keys } from '../../../core/utils/keys/keys.mjs';\nimport { getSortedBreakpoints } from '../../../core/utils/get-sorted-breakpoints/get-sorted-breakpoints.mjs';\nimport { InlineStyles } from '../../../core/InlineStyles/InlineStyles.mjs';\nconst getColumnFlexBasis = (colSpan, columns) => {\n  if (colSpan === \"content\") {\n    return \"auto\";\n  }\n  if (colSpan === \"auto\") {\n    return \"0rem\";\n  }\n  return colSpan ? \"\".concat(100 / (columns / colSpan), \"%\") : void 0;\n};\nconst getColumnMaxWidth = (colSpan, columns, grow) => {\n  if (grow || colSpan === \"auto\" || colSpan === \"content\") {\n    return \"unset\";\n  }\n  return getColumnFlexBasis(colSpan, columns);\n};\nconst getColumnFlexGrow = (colSpan, grow) => {\n  if (!colSpan) {\n    return void 0;\n  }\n  return colSpan === \"auto\" || grow ? \"1\" : void 0;\n};\nconst getColumnOffset = (offset, columns) => offset === 0 ? \"0\" : offset ? \"\".concat(100 / (columns / offset), \"%\") : void 0;\nfunction GridColVariables(_ref) {\n  let {\n    span,\n    order,\n    offset,\n    selector\n  } = _ref;\n  var _a;\n  const theme = useMantineTheme();\n  const ctx = useGridContext();\n  const baseValue = getBaseValue(span);\n  const baseSpan = baseValue === void 0 ? 12 : getBaseValue(span);\n  const baseStyles = filterProps({\n    \"--col-order\": (_a = getBaseValue(order)) == null ? void 0 : _a.toString(),\n    \"--col-flex-grow\": getColumnFlexGrow(baseSpan, ctx.grow),\n    \"--col-flex-basis\": getColumnFlexBasis(baseSpan, ctx.columns),\n    \"--col-width\": baseSpan === \"content\" ? \"auto\" : void 0,\n    \"--col-max-width\": getColumnMaxWidth(baseSpan, ctx.columns, ctx.grow),\n    \"--col-offset\": getColumnOffset(getBaseValue(offset), ctx.columns)\n  });\n  const queries = keys(theme.breakpoints).reduce((acc, breakpoint) => {\n    var _a2;\n    if (!acc[breakpoint]) {\n      acc[breakpoint] = {};\n    }\n    if (typeof order === \"object\" && order[breakpoint] !== void 0) {\n      acc[breakpoint][\"--col-order\"] = (_a2 = order[breakpoint]) == null ? void 0 : _a2.toString();\n    }\n    if (typeof span === \"object\" && span[breakpoint] !== void 0) {\n      acc[breakpoint][\"--col-flex-grow\"] = getColumnFlexGrow(span[breakpoint], ctx.grow);\n      acc[breakpoint][\"--col-flex-basis\"] = getColumnFlexBasis(span[breakpoint], ctx.columns);\n      acc[breakpoint][\"--col-width\"] = span[breakpoint] === \"content\" ? \"auto\" : void 0;\n      acc[breakpoint][\"--col-max-width\"] = getColumnMaxWidth(span[breakpoint], ctx.columns, ctx.grow);\n    }\n    if (typeof offset === \"object\" && offset[breakpoint] !== void 0) {\n      acc[breakpoint][\"--col-offset\"] = getColumnOffset(offset[breakpoint], ctx.columns);\n    }\n    return acc;\n  }, {});\n  const sortedBreakpoints = getSortedBreakpoints(keys(queries), theme).filter(breakpoint => keys(queries[breakpoint.value]).length > 0);\n  const media = sortedBreakpoints.map(breakpoint => ({\n    query: \"(min-width: \".concat(theme.breakpoints[breakpoint.value], \")\"),\n    styles: queries[breakpoint.value]\n  }));\n  return /* @__PURE__ */React.createElement(InlineStyles, {\n    styles: baseStyles,\n    media,\n    selector\n  });\n}\nexport { GridColVariables };","map":{"version":3,"names":["getColumnFlexBasis","colSpan","columns","concat","getColumnMaxWidth","grow","getColumnFlexGrow","getColumnOffset","offset","GridColVariables","_ref","span","order","selector","_a","theme","useMantineTheme","ctx","useGridContext","baseValue","getBaseValue","baseSpan","baseStyles","filterProps","toString","queries","keys","breakpoints","reduce","acc","breakpoint","_a2","sortedBreakpoints","getSortedBreakpoints","filter","value","length","media","map","query","styles","React","createElement","InlineStyles"],"sources":["/home/alan/code/my-weather-dashboard/node_modules/@mantine/core/src/components/Grid/GridCol/GridColVariables.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  getSortedBreakpoints,\n  useMantineTheme,\n  keys,\n  MantineBreakpoint,\n  filterProps,\n  InlineStyles,\n  getBaseValue,\n} from '../../../core';\nimport type { GridColProps, ColSpan } from './GridCol';\nimport { useGridContext } from '../Grid.context';\n\ninterface GridColVariablesProps {\n  selector: string;\n  span: GridColProps['span'] | undefined;\n  order?: GridColProps['order'] | undefined;\n  offset?: GridColProps['offset'] | undefined;\n}\n\nconst getColumnFlexBasis = (colSpan: ColSpan | undefined, columns: number) => {\n  if (colSpan === 'content') {\n    return 'auto';\n  }\n\n  if (colSpan === 'auto') {\n    return '0rem';\n  }\n\n  return colSpan ? `${100 / (columns / colSpan)}%` : undefined;\n};\n\nconst getColumnMaxWidth = (\n  colSpan: ColSpan | undefined,\n  columns: number,\n  grow: boolean | undefined\n) => {\n  if (grow || colSpan === 'auto' || colSpan === 'content') {\n    return 'unset';\n  }\n\n  return getColumnFlexBasis(colSpan, columns);\n};\n\nconst getColumnFlexGrow = (colSpan: ColSpan | undefined, grow: boolean | undefined) => {\n  if (!colSpan) {\n    return undefined;\n  }\n\n  return colSpan === 'auto' || grow ? '1' : undefined;\n};\n\nconst getColumnOffset = (offset: number | undefined, columns: number) =>\n  offset === 0 ? '0' : offset ? `${100 / (columns / offset)}%` : undefined;\n\nexport function GridColVariables({ span, order, offset, selector }: GridColVariablesProps) {\n  const theme = useMantineTheme();\n  const ctx = useGridContext();\n\n  const baseValue = getBaseValue(span);\n  const baseSpan = baseValue === undefined ? 12 : getBaseValue(span);\n\n  const baseStyles: Record<string, string | undefined> = filterProps({\n    '--col-order': getBaseValue(order)?.toString(),\n    '--col-flex-grow': getColumnFlexGrow(baseSpan, ctx.grow),\n    '--col-flex-basis': getColumnFlexBasis(baseSpan, ctx.columns),\n    '--col-width': baseSpan === 'content' ? 'auto' : undefined,\n    '--col-max-width': getColumnMaxWidth(baseSpan, ctx.columns, ctx.grow),\n    '--col-offset': getColumnOffset(getBaseValue(offset), ctx.columns),\n  });\n\n  const queries = keys(theme.breakpoints).reduce<Record<string, Record<string, any>>>(\n    (acc, breakpoint) => {\n      if (!acc[breakpoint]) {\n        acc[breakpoint] = {};\n      }\n\n      if (typeof order === 'object' && order[breakpoint] !== undefined) {\n        acc[breakpoint]['--col-order'] = order[breakpoint]?.toString();\n      }\n\n      if (typeof span === 'object' && span[breakpoint] !== undefined) {\n        acc[breakpoint]['--col-flex-grow'] = getColumnFlexGrow(span[breakpoint], ctx.grow);\n        acc[breakpoint]['--col-flex-basis'] = getColumnFlexBasis(span[breakpoint], ctx.columns);\n        acc[breakpoint]['--col-width'] = span[breakpoint] === 'content' ? 'auto' : undefined;\n        acc[breakpoint]['--col-max-width'] = getColumnMaxWidth(\n          span[breakpoint],\n          ctx.columns,\n          ctx.grow\n        );\n      }\n\n      if (typeof offset === 'object' && offset[breakpoint] !== undefined) {\n        acc[breakpoint]['--col-offset'] = getColumnOffset(offset[breakpoint], ctx.columns);\n      }\n\n      return acc;\n    },\n    {}\n  );\n\n  const sortedBreakpoints = getSortedBreakpoints(keys(queries), theme).filter(\n    (breakpoint) => keys(queries[breakpoint.value]).length > 0\n  );\n\n  const media = sortedBreakpoints.map((breakpoint) => ({\n    query: `(min-width: ${theme.breakpoints[breakpoint.value as MantineBreakpoint]})`,\n    styles: queries[breakpoint.value],\n  }));\n\n  return <InlineStyles styles={baseStyles} media={media} selector={selector} />;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}